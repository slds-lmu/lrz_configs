#!/bin/bash
<%
## Set some sane defaults
if (is.null(resources$ntasks))
  resources$ntasks = 1L
if (is.null(resources$ncpus))
  resources$ncpus = 1L
if (is.null(resources$nodes))
  resources$nodes = ceiling(resources$ncpus / 64)


## Check variables
resources$walltime = checkmate::asInt(resources$walltime, lower = 1L)
resources$memory = checkmate::asInt(resources$memory, lower = 100L)
resources$ntasks = checkmate::asInt(resources$ntasks, lower = 1L)
resources$ncpus = checkmate::asInt(resources$ncpus, lower = 1L)
resources$nodes = checkmate::asInt(resources$nodes, lower = 0L)
-%>
<%=
## serial mode
if (resources$ntasks == 1L & resources$ncpus == 1L) {
  cmd = "Rscript"
  mincpus = 1L
  if (is.null(resources$clusters)) {
    resources$clusters = "serial"
  }
  if (is.null(resources$partition) && resources$clusters == "serial") {
    resources$partition = "serial_std"
  }
  sprintf(paste0("#SBATCH --mem-per-cpu=", resources$memory))
## shared memory mode
} else if(resources$ncpus > 1) {
  cmd = "Rscript"
  if (is.null(resources$clusters)) {
    resources$clusters = "cm2"
  }
  if (is.null(resources$partition)) {
    resources$partition = "cm2_tiny"
    if (resources$ncpus <= 24 && resources$ncpus > 2) resources$partition = "cm2_std"
    if (resources$ncpus > 24) resources$partition = "cm2_large"
  }
  sprintf(paste0("#SBATCH --nodes=", resources$nodes))
  sprintf(paste0("#SBATCH --cpus-per-task=", resources$ncpus))
  sprintf(paste0("#SBATCH --mem=", resources$memory))
## distributed memory mode
} else {
  cmd = "mpirun -np 1 Rscript"
  mincpus = 2L
  if (is.null(resources$clusters)) {
    resources$clusters = "cm2"
  }
  if (is.null(resources$partition)) {
    resources$partition = "cm2_tiny"
    if (resources$ncpus <= 24 && resources$ncpus > 2) resources$partition = "cm2_std"
    if (resources$ncpus > 24) resources$partition = "cm2_large"
  }
  sprintf(paste0("#SBATCH --mem-per-cpu=", resources$memory))
  sprintf(paste0("#SBATCH --ntasks=", resources$ntasks))
}
%>

<%
# relative paths are not handled well by Slurm
log.file = fs::path_expand(log.file)
-%>


#SBATCH --job-name=<%= job.hash %>
#SBATCH --output=<%= log.file %>
#SBATCH --error=<%= log.file %>
#SBATCH --time=<%= ceiling(resources$walltime / 60L)%>
#SBATCH --clusters=<%= resources$clusters %>
##SBATCH --reservation=R_at_LRZ
<%=
## set partition if required
if(!is.null(resources$partition)){
sprintf(paste0("#SBATCH --partition='", resources$partition, "'\n"))
}
%>

<%= cmd %> -e 'batchtools::doJobCollection("<%= uri %>")'
